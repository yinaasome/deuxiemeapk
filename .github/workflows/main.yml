name: Build Mobile Application
on:
  push:
    branches: [main, master]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.9'
  ANDROID_API: '33'
  BUILD_TOOLS: '33.0.0'
  NDK_VERSION: '25.2.9519653'
  JAVA_VERSION: '17'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Setup Android SDK manually
      run: |
        # Create Android SDK directory
        sudo mkdir -p /opt/android-sdk
        sudo chown -R $USER:$USER /opt/android-sdk
        
        # Download and install command line tools
        cd /opt/android-sdk
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip
        mkdir -p cmdline-tools/latest
        mv cmdline-tools/* cmdline-tools/latest/ 2>/dev/null || true
        
        # Set environment variables
        echo "ANDROID_HOME=/opt/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=/opt/android-sdk" >> $GITHUB_ENV
        echo "PATH=/opt/android-sdk/cmdline-tools/latest/bin:/opt/android-sdk/platform-tools:$PATH" >> $GITHUB_ENV
        
    - name: Install Android SDK components
      run: |
        # Accept licenses first
        yes | /opt/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses
        
        # Install required SDK components
        /opt/android-sdk/cmdline-tools/latest/bin/sdkmanager \
          "platforms;android-${{ env.ANDROID_API }}" \
          "build-tools;${{ env.BUILD_TOOLS }}" \
          "ndk;${{ env.NDK_VERSION }}" \
          "platform-tools" \
          "emulator"
          
    - name: Set additional environment variables
      run: |
        echo "ANDROID_NDK_HOME=/opt/android-sdk/ndk/${{ env.NDK_VERSION }}" >> $GITHUB_ENV
        echo "ANDROID_NDK_ROOT=/opt/android-sdk/ndk/${{ env.NDK_VERSION }}" >> $GITHUB_ENV
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.buildozer
          /opt/android-sdk
        key: ${{ runner.os }}-android-sdk-${{ env.ANDROID_API }}-${{ env.BUILD_TOOLS }}-${{ env.NDK_VERSION }}
        restore-keys: |
          ${{ runner.os }}-android-sdk-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git zip unzip autoconf libtool \
          pkg-config zlib1g-dev libncurses5-dev \
          libncursesw5-dev libtinfo6 cmake \
          libffi-dev libssl-dev libltdl-dev \
          libxml2-dev libxslt-dev build-essential \
          libsqlite3-dev sqlite3 bzip2 libbz2-dev \
          libreadline-dev llvm tk-dev \
          ccache ant libapache-commons-codec-java \
          openjdk-8-jdk-headless
          
    - name: Install Python packages
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install buildozer==1.5.0 cython==0.29.33 kivy==2.3.0
        
    - name: Create main.py if missing
      run: |
        if [ ! -f "main.py" ]; then
          cat > main.py << 'EOF'
        from kivy.app import App
        from kivy.uix.boxlayout import BoxLayout
        from kivy.uix.label import Label
        from kivy.uix.button import Button

        class MainApp(App):
            def build(self):
                layout = BoxLayout(orientation='vertical', padding=20, spacing=20)
                
                title = Label(
                    text='Mobile Money App',
                    font_size='24sp',
                    size_hint_y=None,
                    height='48dp'
                )
                
                version = Label(
                    text='Version 1.0',
                    font_size='16sp',
                    size_hint_y=None,
                    height='32dp'
                )
                
                button = Button(
                    text='Tap me!',
                    size_hint_y=None,
                    height='48dp'
                )
                button.bind(on_press=self.on_button_press)
                
                layout.add_widget(title)
                layout.add_widget(version)
                layout.add_widget(button)
                
                return layout
                
            def on_button_press(self, instance):
                instance.text = 'Button pressed!'

        if __name__ == '__main__':
            MainApp().run()
        EOF
        fi
        
    - name: Create buildozer.spec
      run: |
        cat > buildozer.spec << 'EOF'
        [app]
        title = Mobile Money
        package.name = mobilemoney
        package.domain = com.example
        source.dir = .
        source.include_exts = py,png,jpg,kv,atlas,txt
        version = 1.0
        requirements = python3,kivy
        presplash.filename = %(source.dir)s/data/presplash.png
        icon.filename = %(source.dir)s/data/icon.png
        orientation = portrait
        osx.python_version = 3
        osx.kivy_version = 2.3.0
        fullscreen = 0
        android.presplash_color = #FFFFFF
        android.entrypoint = org.kivy.android.PythonActivity
        android.apptheme = "@android:style/Theme.NoTitleBar"
        android.permissions = INTERNET
        
        [buildozer]
        log_level = 2
        bin_dir = ./bin
        
        # Android specific
        android.api = 33
        android.minapi = 21
        android.ndk = 25.2.9519653
        android.sdk = 33
        android.build_tools = 33.0.0
        android.arch = armeabi-v7a
        android.accept_sdk_license = True
        android.sdk_path = /opt/android-sdk
        android.ndk_path = /opt/android-sdk/ndk/25.2.9519653
        android.gradle_repositories = google(), mavenCentral()
        android.enable_androidx = True
        EOF
        
    - name: Create required directories and files
      run: |
        mkdir -p data
        # Create a simple icon (using ImageMagick if available, otherwise skip)
        if command -v convert &> /dev/null; then
          convert -size 512x512 xc:lightblue -gravity center -pointsize 72 -annotate +0+0 'MM' data/icon.png
          convert -size 512x512 xc:lightgreen -gravity center -pointsize 48 -annotate +0+0 'Mobile\nMoney' data/presplash.png
        else
          # Create placeholder files
          touch data/icon.png
          touch data/presplash.png
        fi
        
    - name: Initialize Buildozer
      run: |
        export ANDROID_HOME=/opt/android-sdk
        export ANDROID_SDK_ROOT=/opt/android-sdk
        export ANDROID_NDK_HOME=/opt/android-sdk/ndk/${{ env.NDK_VERSION }}
        export PATH=/opt/android-sdk/cmdline-tools/latest/bin:/opt/android-sdk/platform-tools:$PATH
        
        buildozer android clean || true
        
    - name: Build APK
      run: |
        export ANDROID_HOME=/opt/android-sdk
        export ANDROID_SDK_ROOT=/opt/android-sdk
        export ANDROID_NDK_HOME=/opt/android-sdk/ndk/${{ env.NDK_VERSION }}
        export PATH=/opt/android-sdk/cmdline-tools/latest/bin:/opt/android-sdk/platform-tools:$PATH
        export BUILDOZER_LOG_LEVEL=2
        export GRADLE_OPTS="-Xmx3072m -XX:MaxMetaspaceSize=512m"
        export JAVA_OPTS="-Xmx3072m"
        
        # Build with retries
        for i in {1..2}; do
          echo "Build attempt $i/2"
          if buildozer -v android debug 2>&1 | tee build.log; then
            echo "Build succeeded on attempt $i"
            break
          else
            echo "Build failed on attempt $i"
            if [ $i -eq 2 ]; then
              echo "::error::Build failed after 2 attempts"
              echo "Last 50 lines of build log:"
              tail -50 build.log
              exit 1
            fi
            echo "Cleaning and retrying..."
            buildozer android clean || true
            sleep 5
          fi
        done
        
    - name: Find and verify APK
      run: |
        # Search for APK files
        APK_FILES=$(find . -name "*.apk" -type f 2>/dev/null || true)
        
        if [ -z "$APK_FILES" ]; then
          echo "::error::No APK file found!"
          echo "Searching in all directories..."
          find . -type f -name "*.apk" -o -name "*debug*" -o -name "*release*" 2>/dev/null || true
          ls -la bin/ 2>/dev/null || echo "bin/ directory not found"
          ls -la .buildozer/android/platform/build-*/outputs/apk/debug/ 2>/dev/null || echo "gradle output directory not found"
          exit 1
        fi
        
        # Use the first APK found
        APK_FILE=$(echo "$APK_FILES" | head -n 1)
        echo "APK found: $APK_FILE"
        echo "APK size: $(du -h "$APK_FILE" | cut -f1)"
        
        # Copy to bin directory if not already there
        mkdir -p bin
        if [[ "$APK_FILE" != bin/* ]]; then
          cp "$APK_FILE" bin/
          APK_FILE="bin/$(basename "$APK_FILE")"
        fi
        
        echo "APK_PATH=$APK_FILE" >> $GITHUB_ENV
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: mobile-money-app-${{ github.run_number }}
        path: ${{ env.APK_PATH }}
        retention-days: 30
        
    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ github.run_number }}
        path: |
          build.log
          buildozer.spec
          .buildozer/android/platform/build-*/build/outputs/logs/
        retention-days: 7
