name: Build Mobile Application
on:
  push:
    branches: [main, master]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.9'
  ANDROID_API: '33'
  BUILD_TOOLS: '33.0.0'
  NDK_VERSION: '25.2.9519653'
  CMAKE_VERSION: '3.22.1'
  JAVA_VERSION: '17'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: ${{ env.ANDROID_API }}
        build-tools: ${{ env.BUILD_TOOLS }}
        ndk-version: ${{ env.NDK_VERSION }}
        cmake-version: ${{ env.CMAKE_VERSION }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.buildozer
          ~/.gradle/caches
        key: ${{ runner.os }}-deps-${{ hashFiles('**/requirements.txt', '**/buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-deps-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git zip unzip autoconf libtool \
          pkg-config zlib1g-dev libncurses5-dev \
          libncursesw5-dev libtinfo6 cmake \
          libffi-dev libssl-dev libltdl-dev \
          libxml2-dev libxslt-dev build-essential \
          libsqlite3-dev sqlite3 bzip2 libbz2-dev \
          libreadline-dev llvm libncurses5-dev \
          libncursesw5-dev tk-dev
          
    - name: Install Python packages
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install buildozer cython==0.29.33 kivy==2.3.0
        
    - name: Accept Android licenses
      run: |
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
        
    - name: Create main.py if missing
      run: |
        if [ ! -f "main.py" ]; then
          cat > main.py << 'EOF'
        from kivy.app import App
        from kivy.uix.label import Label

        class MobileMoneyApp(App):
            def build(self):
                return Label(text='Mobile Money App\nVersion 1.0')

        if __name__ == '__main__':
            MobileMoneyApp().run()
        EOF
        fi
        
    - name: Create buildozer.spec
      run: |
        if [ ! -f "buildozer.spec" ]; then
          cat > buildozer.spec << 'EOF'
        [app]
        title = Mobile Money
        package.name = mobilemoney
        package.domain = org.example
        source.dir = .
        source.include_exts = py,png,jpg,kv,atlas
        version = 1.0
        requirements = python3,kivy==2.3.0
        
        [buildozer]
        log_level = 2
        
        [app:android]
        api = 33
        minapi = 21
        sdk = 33
        ndk = 25.2.9519653
        build_tools = 33.0.0
        arch = armeabi-v7a,arm64-v8a
        accept_sdk_license = True
        
        # Permissions
        android.permissions = INTERNET,ACCESS_NETWORK_STATE
        
        # Gradle
        android.gradle_repositories = google(), mavenCentral()
        android.enable_androidx = True
        
        # Build optimization
        android.add_compile_options = -Xmx2048m
        android.add_gradle_repositories = google(), mavenCentral()
        EOF
        fi
        
    - name: Initialize Buildozer
      run: |
        buildozer android clean || true
        
    - name: Build APK with detailed logging
      run: |
        set -e
        export BUILDOZER_LOG_LEVEL=2
        export GRADLE_OPTS="-Xmx2048m -XX:MaxMetaspaceSize=512m"
        
        # Build with verbose output
        buildozer -v android debug 2>&1 | tee build.log
        
        # Check if build was successful
        if [ ! -f "bin/*.apk" ] && [ ! -f ".buildozer/android/platform/build-*/outputs/apk/debug/*.apk" ]; then
          echo "::error::APK build failed"
          echo "Build log:"
          cat build.log | tail -100
          exit 1
        fi
        
    - name: Find and verify APK
      run: |
        # Look for APK in multiple locations
        APK_FILE=""
        
        # Check bin directory
        if ls bin/*.apk 1> /dev/null 2>&1; then
          APK_FILE=$(ls bin/*.apk | head -n 1)
        fi
        
        # Check buildozer output directory
        if [ -z "$APK_FILE" ] && ls .buildozer/android/platform/build-*/outputs/apk/debug/*.apk 1> /dev/null 2>&1; then
          APK_FILE=$(ls .buildozer/android/platform/build-*/outputs/apk/debug/*.apk | head -n 1)
          # Copy to bin directory
          mkdir -p bin
          cp "$APK_FILE" bin/
          APK_FILE="bin/$(basename "$APK_FILE")"
        fi
        
        if [ -z "$APK_FILE" ]; then
          echo "::error::No APK file found!"
          echo "Searching for APK files..."
          find . -name "*.apk" -type f 2>/dev/null || true
          exit 1
        fi
        
        echo "APK found: $APK_FILE"
        echo "APK size: $(du -h "$APK_FILE" | cut -f1)"
        echo "APK_PATH=$APK_FILE" >> $GITHUB_ENV
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: mobile-money-app-${{ github.run_number }}
        path: ${{ env.APK_PATH }}
        retention-days: 30
        
    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ github.run_number }}
        path: |
          build.log
          .buildozer/android/platform/build-*/build/outputs/logs/
        retention-days: 7
