name: Build Android APK (Fixed)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04  # Utiliser Ubuntu 20.04 pour plus de stabilitÃ©

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'  # Python 3.9 est plus stable avec buildozer

    - name: Set up Java 11
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Cache buildozer global directory
      uses: actions/cache@v3
      with:
        path: .buildozer_global
        key: buildozer-global-${{ hashFiles('buildozer.spec') }}-v2

    - name: Cache buildozer directory
      uses: actions/cache@v3
      with:
        path: .buildozer
        key: buildozer-${{ hashFiles('buildozer.spec') }}-v2

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          python3-dev \
          python3-pip \
          python3-setuptools \
          python3-wheel \
          openjdk-11-jdk \
          autoconf \
          automake \
          libtool \
          pkg-config \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          libtinfo5 \
          cmake \
          libffi-dev \
          libssl-dev \
          libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev \
          gstreamer1.0-plugins-base \
          gstreamer1.0-plugins-good \
          gstreamer1.0-plugins-bad \
          gstreamer1.0-plugins-ugly \
          gstreamer1.0-libav \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev \
          libsdl2-ttf-dev \
          libportmidi-dev \
          libswscale-dev \
          libavformat-dev \
          libavcodec-dev \
          libavdevice-dev \
          libavfilter-dev \
          libswresample-dev \
          libavutil-dev \
          libpng-dev \
          libjpeg-dev \
          libtiff5-dev \
          libopenexr-dev \
          libwebp-dev \
          libtbb-dev \
          libeigen3-dev \
          python3-numpy \
          ant \
          ccache \
          unzip

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install buildozer
        pip install cython==0.29.33
        pip install colorama appdirs sh jinja2 six

    - name: Set up Android SDK manually
      run: |
        # Create directories
        mkdir -p $HOME/.buildozer/android/platform
        cd $HOME/.buildozer/android/platform
        
        # Download Android SDK Command Line Tools
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip
        mkdir -p android-sdk/cmdline-tools
        mv cmdline-tools android-sdk/cmdline-tools/latest
        
        # Set up environment
        export ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools
        
        # Accept licenses
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
        
        # Install SDK components
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --update
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
          "platform-tools" \
          "platforms;android-31" \
          "build-tools;31.0.0" \
          "ndk;23.1.7779620"
        
        # Download and extract NDK 25b (compatible version)
        cd $HOME/.buildozer/android/platform
        wget -q https://dl.google.com/android/repository/android-ndk-r25b-linux.zip
        unzip -q android-ndk-r25b-linux.zip
        
        # Create symlinks for buildozer compatibility
        mkdir -p android-sdk/tools/bin
        ln -sf ../../cmdline-tools/latest/bin/sdkmanager android-sdk/tools/bin/sdkmanager
        ln -sf ../../cmdline-tools/latest/bin/avdmanager android-sdk/tools/bin/avdmanager

    - name: Set environment variables
      run: |
        echo "ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_NDK_HOME=$HOME/.buildozer/android/platform/android-ndk-r25b" >> $GITHUB_ENV
        echo "ANDROIDSDK=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
        echo "ANDROIDNDK=$HOME/.buildozer/android/platform/android-ndk-r25b" >> $GITHUB_ENV
        echo "ANDROIDAPI=31" >> $GITHUB_ENV
        echo "ANDROIDMINAPI=21" >> $GITHUB_ENV
        echo "PATH=$PATH:$HOME/.buildozer/android/platform/android-sdk/cmdline-tools/latest/bin:$HOME/.buildozer/android/platform/android-sdk/platform-tools:$HOME/.buildozer/android/platform/apache-ant-1.9.4/bin" >> $GITHUB_ENV

    - name: Create main.py
      run: |
        if [ ! -f main.py ]; then
          if [ -f apk3.py ]; then
            cp apk3.py main.py
          else
            echo "#!/usr/bin/env python3" > main.py
            echo "from kivy.app import App" >> main.py
            echo "from kivy.uix.label import Label" >> main.py
            echo "" >> main.py
            echo "class MainApp(App):" >> main.py
            echo "    def build(self):" >> main.py
            echo "        return Label(text='Hello, Mobile Money!')" >> main.py
            echo "" >> main.py
            echo "if __name__ == '__main__':" >> main.py
            echo "    MainApp().run()" >> main.py
          fi
        fi

    - name: Fix autotools issues
      run: |
        # Installer des versions spÃ©cifiques des autotools
        sudo apt-get install -y autotools-dev autoconf-archive
        
        # CrÃ©er des liens symboliques si nÃ©cessaire
        sudo ln -sf /usr/bin/aclocal /usr/bin/aclocal-1.16 || true
        sudo ln -sf /usr/bin/automake /usr/bin/automake-1.16 || true
        
        # VÃ©rifier les versions
        autoconf --version
        automake --version
        autoheader --version

    - name: Pre-configure buildozer
      run: |
        # Initialiser buildozer avec une configuration simple
        buildozer init || true
        
        # Copier notre buildozer.spec si il existe
        if [ -f buildozer.spec ]; then
          echo "Using existing buildozer.spec"
        fi

    - name: Build APK with detailed logging
      run: |
        # Construire avec logging dÃ©taillÃ© et gestion d'erreurs
        export ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk
        export ANDROID_SDK_ROOT=$ANDROID_HOME
        export ANDROID_NDK_HOME=$HOME/.buildozer/android/platform/android-ndk-r25b
        export ANDROIDSDK=$ANDROID_HOME
        export ANDROIDNDK=$ANDROID_NDK_HOME
        export ANDROIDAPI=31
        export ANDROIDMINAPI=21
        
        # Nettoyer les builds prÃ©cÃ©dents en cas d'erreur cache
        rm -rf .buildozer/android/platform/build-* || true
        
        # Build avec retry en cas d'Ã©chec
        buildozer android debug --verbose || {
          echo "First build attempt failed, cleaning and retrying..."
          buildozer android clean
          rm -rf .buildozer/android/platform/build-*
          buildozer android debug --verbose
        }

    - name: Verify APK creation
      run: |
        echo "Checking for APK files..."
        ls -la bin/ || echo "No bin directory found"
        find . -name "*.apk" -type f 2>/dev/null || echo "No APK files found"

    - name: Upload APK artifact
      uses: actions/upload-artifact@v3
      with:
        name: mobile-money-debug-apk
        path: bin/*.apk
        if-no-files-found: warn

    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: build-logs
        path: |
          .buildozer/android/platform/build-*/build.log
          .buildozer/android/platform/python-for-android/dist/*/build.log
        if-no-files-found: ignore

    - name: Create Release on Tag
      if: startsWith(github.ref, 'refs/tags/') && success()
      uses: softprops/action-gh-release@v1
      with:
        files: bin/*.apk
        name: Mobile Money v${{ github.ref_name }}
        body: |
          ðŸ“± **Mobile Money Application - Version ${{ github.ref_name }}**
          
          ### Installation :
          1. TÃ©lÃ©chargez le fichier APK
          2. Activez "Sources inconnues" dans Android
          3. Installez l'application
          
          ### Connexion par dÃ©faut :
          - **Administrateur** : `admin` / `admin123`
          
          ---
          Build automatique via GitHub Actions
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
